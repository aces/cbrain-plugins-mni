
<%= form.params_hidden_field :collection_id %> <!-- can be nil -->

<fieldset>
<legend>Pipeline Options</legend>

  <%= form.params_label  :template, "Template:", :title => "Define the template for image processing" %>
  <%= form.params_select :template, [ "0.50", "0.75", "1.00", "1.50", "2.00", "3.00", "4.00", "6.00" ] %>

  <br/>

  <%= form.params_label  :model, "Model:", :title => "Define the model for image-processing" %>
  <%= form.params_select :model, [ "icbm152lin", "icbm152nl" ] %>

  <% if ! @task.new_record? %>

    <br/>

    <%= form.params_label  :reset_from, "Restart from this stage:", :title => "Stage to restart from" %>
    <%= form.params_select :reset_from, [ "" ] + CbrainTask::Civet::StagesNames %>

  <% end %>

</fieldset>

<P>

<fieldset>
<legend>CIVET options</legend>

  <%= form.params_label  :interp, "Interpolation", :title => "Volume interpolation method from native to stereotaxic space (trilinear, tricubic, sinc) default trilinear" %>
  <%= form.params_select :interp, [ "trilinear", "tricubic", "sinc" ] %>

  <br>

  <%= form.params_label      :N3_distance, "N3 distance:", :title => "N3 spline distance in mm (suggested values: 200 for 1.5T scan; 50 for 3T scan) default: 200" %>
  <%= form.params_text_field :N3_distance, :size => 4 %>

  <br>

  <%= form.params_label  :lsq, "Degrees of freedom for linear registration:", :title => "Degrees of freedom for linear registration to stereotaxic space" %>
  <%= form.params_select :lsq, [ "6", "9", "12" ] %>

  <br>

  <%= form.params_label     :no_surfaces, "Do NOT build surfaces:", :title => "Do NOT build surfaces" %>
  <%= form.params_check_box :no_surfaces %>

  <br>

  <%= form.params_label      :thickness_method,  "Thickness method:", :title => "Thickness method" %>
  <%
     tmethods =  [ "tlink", "tlaplace" ]
     if !@task.new_record? && ! @task.params[:thickness_method].blank?
       old_val = @task.params[:thickness_method].to_s
       if old_val =~ /^(tnear|tnormal)$/ # old values no longer supported
         tmethods << old_val
       end
     end
  %>
  <%= form.params_select     :thickness_method, tmethods %>
  <%= form.params_label      :thickness_kernel, "and kernel size:", :title => "FWHM for surface blurring" %>
  <%= form.params_text_field :thickness_kernel, :size => 4 %>

  <br>

  <%= form.params_label     :resample_surfaces, "Resample surfaces:", :title => "Resample cortical surfaces to obtain elemental vertex areas and volumes" %>
  <%= form.params_check_box :resample_surfaces %>

  <br>

  <%= form.params_label     :combine_surfaces, "Combine surfaces:", :title => "Combine left and right cortical surfaces" %>
  <%= form.params_check_box :combine_surfaces %>

</fieldset>

<P>

<fieldset>
<legend>VBM Options</legend>

  <%= form.params_label :VBM, "Process VBM files:", :title => "Process VBM files" %>
  <%= form.params_check_box :VBM %>

  <br>

  <%= form.params_label :VBM_fwhm, "Blurring kernel size in mm for volume:", :title => "Blurring kernel size in mm for volume" %>
  <%= form.params_text_field :VBM_fwhm, :size => 4 %>

  <br>

  <%= form.params_label :VBM_symmetry, "Run symmetry tools:", :title => "Run symmetry tools" %>
  <%= form.params_check_box :VBM_symmetry %>

  <br>

  <%= form.params_label :VBM_cerebellum, "Keep cerebellum in VBM maps:", :title => "Keep cerebellum in VBM maps" %>
  <%= form.params_check_box :VBM_cerebellum %>

</fieldset>

<P>

<fieldset>

<% if ! params[:collection_id].blank? %>
 <legend>MINC file input list for collection <em><%= Userfile.find(params[:collection_id]).name %></em></legend>
<% else %>
 <legend>MINC file input list</legend>
<% end %>

<table class="simple">
  <tr>
    <th><%= select_all_checkbox 'launch_it', :checked => true %>Launch CIVET?</th>
    <th>T1 name</th>
    <th>Prefix</th>
    <th>Subject ID</th>
    <th>T2 found?</th>
    <th>PD found?</th>
    <th>Mask found?</th>
    <th title="Use T1, T2 and PD native files for tissue classification">Use multispectral?</th>
    <th>Use mask?</th>
  </tr>
  <% 
    keys = params[:file_args].keys
    keys = keys.sort_by{ |k| params[:file_args][k][:t1_name] || ""}
   %>
  <% keys.each do |idx| %>
    <% file = params[:file_args][idx] %>
     <% if ! params[:collection_id].blank? %>
       <%= render :partial => task_partial('civet_file_from_col'),  :locals  => {:file  => file, :idx => idx } %>
     <% else %>
       <%= render :partial => task_partial('civet_file_from_list'), :locals  => {:file  => file, :idx => idx } %>
     <% end %>
  <% end %>
</table>

<P>

Convenience helper: provide overall patterns for
the <strong>Prefix</strong> and <strong>Subject ID</strong>:

<P>

<%= form.params_label :prefix_auto_comp, "Prefix pattern:" %>     <%= form.params_text_field :prefix_auto_comp %>
<%= form.params_label :dsid_auto_comp,   "Subject ID pattern:" %> <%= form.params_text_field :dsid_auto_comp %>

<P>

The patterns can include special <em>components</em>
<%= show_hide_toggle "(toggle explanation)", "#component_explain", :class  => 'action_link' %>
like <em>{1}</em>, <em>{2}</em> etc which will extract pieces of text from the
<strong>T1 Name</strong>.<br/>

Click <%= submit_tag 'Refresh this list' %> to see all the Prefix and Subject IDs automatically updated.
You can try this as often as you want, until you're satisfied.

<% if ! @task.new_record? %>
 <p>
 <strong>Since this is an existing task, changing any Subject IDs will require a full restart of the pipelines.</strong>
 </p>
<% end %>


<div id="component_explain" style="display:none">

<p>
Components identify the sequences of alphanumeric characters in the T1 filenames,
numbered from 1 to 8.
</p>
<p>
For instance, if a MINC T1 file is named "anonymous_2008-07-10_092900_10_mri.mnc", then its
componants would be:
</p>

      <ul>
        <li>{1} = "anonymous"</li>
        <li>{2} = "2008"</li>
        <li>{3} = "07"</li>
        <li>{4} = "10"</li>
        <li>{5} = "092900"</li>
        <li>{6} = "10"</li>
        <li>{7} = "mri"</li>
        <li>{8} = "mnc"</li>
      </ul>

<p>
As an example, if you entered the pattern "K2-{1}_{6}" for the prefix,
then the actual prefix automatically created for you would be "K2-anonymous_10".
</p>

</div>

</fieldset>

<p/>

<fieldset>

<legend>Optional Output Renaming <%= show_hide_toggle "(Show)", "#output_renaming", :class  => 'action_link' %></legend>

<div id="output_renaming" style="display: none">

<p>
Civet's output is saved in FileCollections. By default, the names are
composites of the subject ID, the execution server's name and the
task's ID.
</p>
An alternate naming scheme can be provided by entering a pattern here:
<br>
<%= form.params_text_field :output_filename_pattern, :size => 80 %><br>
<small>(Leave blank to let CIVET name the files automatically like it normally does)</small>

<p>
This naming pattern use the same <em>components</em> (like <em>{1}</em>, <em>{2}</em> etc)
described above for the automatic prefix/subject ID pattern matching.<br/>
These components will extract pieces of text from the <strong>T1 Name</strong>.
The naming pattern can also include <em>other special keywords</em><br/>
(like <em>{date}</em>, <em>{run_number}</em> etc) that will be substituted
automatically. The supported keywords are:
</p>

<dl>

  <dt>{date}</dt>
  <dd>The current date in this format: YYYY-MM-DD</dd>

  <dt>{time}</dt>
  <dd>The current time in this format: HH:MM:SS</dd>

  <dt>{task_id}</dt>
  <dd>A unique number ID for each CIVET task, which
      doesn't change even if the task is restarted</dd>

  <dt>{run_number}</dt>
  <dd>A numeric run number that increases everytime the CIVET
      task is restarted, initially set to '1'</dd>

  <dt>{prefix}</dt>
  <dd>The prefix of the CIVET run</dd>

  <dt>{subject}</dt>
  <dd>The subject ID of the CIVET run</dd>

  <dt>{cluster}</dt>
  <dd>The name of the cluster for the run</dd>

</dl>

<p>
<strong>Use these keywords to make sure your your output filenames are unique enough, so that one CIVET<br/>
job's output doesn't crush another job's output!</strong>.
</p>

</div>

</fieldset>


<% combiner_tool_configs = ToolConfig.where( :bourreau_id => @bourreaux.map(&:id), :tool_id => CbrainTask::CivetCombiner.tool.id ) %>
<% combiner_tool_configs.reject! { |tc| ! tc.can_be_accessed_by?(@task.user) } %>

<% qc_tool_configs       = ToolConfig.where( :bourreau_id => @bourreaux.map(&:id), :tool_id => CbrainTask::CivetQc.tool.id ) %>
<% qc_tool_configs.reject! { |tc| ! tc.can_be_accessed_by?(@task.user) } %>

<% if @task.new_record? && combiner_tool_configs.size > 0 %>

<P>

<fieldset>
<legend>Optional post-CIVET operations <%= show_hide_toggle "(Show)", "#combiner_qc_panel", :class  => 'action_link' %></legend>

<div id="combiner_qc_panel" style="display: none">

<ul>

<li>
  Combine CIVET results into a CivetStudy named: <%= form.params_text_field :study_name %>
  using CivetCombiner version: <%= tool_config_select :combiner_tool_config_id.to_la, { :tool_configs => combiner_tool_configs, :selector => params[:combiner_tool_config_id] } %>
</li>

<% if qc_tool_configs.size > 0 %>
<li>
  Launch <%= form.params_check_box :qc_study %> Claude's QC script on that CivetStudy
  using CivetQc version: <%= tool_config_select :qc_tool_config_id.to_la, { :tool_configs => qc_tool_configs, :selector => params[:qc_tool_config_id] } %>
</li>
<% end %>

</ul>

</div>

</fieldset>

<% end %>




<% if current_user.has_role?(:admin) %>
 <hr>
 <BIG>Fake run:</BIG><P>
 Enter the numeric ID of a pre-existing CivetCollection to use it as 'pretend' output:
 <%= form.params_text_field :fake_run_civetcollection_id %>

<% end %>

